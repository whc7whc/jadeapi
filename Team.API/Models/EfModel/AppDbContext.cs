// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Team.API.Models.EfModel;

public partial class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AdminInvitation> AdminInvitations { get; set; }

    public virtual DbSet<Attribute> Attributes { get; set; }

    public virtual DbSet<AttributeValue> AttributeValues { get; set; }

    public virtual DbSet<Banner> Banners { get; set; }

    public virtual DbSet<Barcode> Barcodes { get; set; }

    public virtual DbSet<Carrier> Carriers { get; set; }

    public virtual DbSet<Cart> Carts { get; set; }

    public virtual DbSet<CartItem> CartItems { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<ChatMessage> ChatMessages { get; set; }

    public virtual DbSet<ChatRoom> ChatRooms { get; set; }

    public virtual DbSet<CommentLike> CommentLikes { get; set; }

    public virtual DbSet<ContentPublishingSchedule> ContentPublishingSchedules { get; set; }

    public virtual DbSet<ContentStatistic> ContentStatistics { get; set; }

    public virtual DbSet<Coupon> Coupons { get; set; }

    public virtual DbSet<CouponCategory> CouponCategories { get; set; }

    public virtual DbSet<CouponDispatchTask> CouponDispatchTasks { get; set; }

    public virtual DbSet<CouponNotification> CouponNotifications { get; set; }

    public virtual DbSet<CouponReturnHistory> CouponReturnHistories { get; set; }

    public virtual DbSet<Member> Members { get; set; }

    public virtual DbSet<MemberAddress> MemberAddresses { get; set; }

    public virtual DbSet<MemberCoupon> MemberCoupons { get; set; }

    public virtual DbSet<MemberFollow> MemberFollows { get; set; }

    public virtual DbSet<MemberProfile> MemberProfiles { get; set; }

    public virtual DbSet<MemberStat> MemberStats { get; set; }

    public virtual DbSet<MembershipLevel> MembershipLevels { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<OfficialPost> OfficialPosts { get; set; }

    public virtual DbSet<OfficialPostComment> OfficialPostComments { get; set; }

    public virtual DbSet<OfficialPostImage> OfficialPostImages { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderAddress> OrderAddresses { get; set; }

    public virtual DbSet<OrderDetail> OrderDetails { get; set; }

    public virtual DbSet<OrderNotification> OrderNotifications { get; set; }

    public virtual DbSet<PasswordResetCode> PasswordResetCodes { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<PaymentRecord> PaymentRecords { get; set; }

    public virtual DbSet<PointsLog> PointsLogs { get; set; }

    public virtual DbSet<PointsLogError> PointsLogErrors { get; set; }

    public virtual DbSet<Post> Posts { get; set; }

    public virtual DbSet<PostComment> PostComments { get; set; }

    public virtual DbSet<PostLike> PostLikes { get; set; }

    public virtual DbSet<PostProduct> PostProducts { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductAttributeValue> ProductAttributeValues { get; set; }

    public virtual DbSet<ProductImage> ProductImages { get; set; }

    public virtual DbSet<RestockNotification> RestockNotifications { get; set; }

    public virtual DbSet<Return> Returns { get; set; }

    public virtual DbSet<Review> Reviews { get; set; }

    public virtual DbSet<Seller> Sellers { get; set; }

    public virtual DbSet<SellerBankAccount> SellerBankAccounts { get; set; }

    public virtual DbSet<SellerDocument> SellerDocuments { get; set; }

    public virtual DbSet<SellerReturnInfo> SellerReturnInfos { get; set; }

    public virtual DbSet<Session> Sessions { get; set; }

    public virtual DbSet<Shipment> Shipments { get; set; }

    public virtual DbSet<SocialLogin> SocialLogins { get; set; }

    public virtual DbSet<SubCategory> SubCategories { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserAuditLog> UserAuditLogs { get; set; }

    public virtual DbSet<UserRole> UserRoles { get; set; }

    public virtual DbSet<VerificationCode> VerificationCodes { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AdminInvitation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Admin_In__3214EC078F4B85D1");

            entity.ToTable("Admin_Invitations");

            entity.HasIndex(e => e.Token, "UQ__Admin_In__1EB4F8175795B10E").IsUnique();

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.CreatedBy).HasColumnName("Created_By");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.ExpiresAt)
                .HasColumnType("datetime")
                .HasColumnName("Expires_At");
            entity.Property(e => e.IsUsed).HasColumnName("Is_Used");
            entity.Property(e => e.Token)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UserId).HasColumnName("User_Id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.AdminInvitationCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK__Admin_Inv__Creat__51EF2864");

            entity.HasOne(d => d.User).WithMany(p => p.AdminInvitationUsers)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Admin_Inv__User___52E34C9D");
        });

        modelBuilder.Entity<Attribute>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Attribut__3214EC07FC9D7712");

            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.IsApproved).HasColumnName("Is_Approved");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.SellersId).HasColumnName("Sellers_Id");

            entity.HasOne(d => d.Sellers).WithMany(p => p.Attributes)
                .HasForeignKey(d => d.SellersId)
                .HasConstraintName("FK__Attribute__Selle__55BFB948");
        });

        modelBuilder.Entity<AttributeValue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Attribut__3214EC0700BE5E4B");

            entity.ToTable("Attribute_Values");

            entity.Property(e => e.AttributeId).HasColumnName("Attribute_Id");
            entity.Property(e => e.HexCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Hex_Code");
            entity.Property(e => e.SellersId).HasColumnName("Sellers_Id");
            entity.Property(e => e.Value)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.Attribute).WithMany(p => p.AttributeValues)
                .HasForeignKey(d => d.AttributeId)
                .HasConstraintName("FK__Attribute__Attri__53D770D6");

            entity.HasOne(d => d.Sellers).WithMany(p => p.AttributeValues)
                .HasForeignKey(d => d.SellersId)
                .HasConstraintName("FK__Attribute__Selle__54CB950F");
        });

        modelBuilder.Entity<Banner>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Banners__3214EC07171671D6");

            entity.Property(e => e.ClickCount)
                .HasDefaultValue(0)
                .HasColumnName("Click_Count");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.CreatedBy).HasColumnName("Created_By");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.DisplayOrder)
                .HasDefaultValue(0)
                .HasColumnName("Display_Order");
            entity.Property(e => e.EndTime)
                .HasColumnType("datetime")
                .HasColumnName("End_Time");
            entity.Property(e => e.ImageUrl)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("Image_Url");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("Is_Active");
            entity.Property(e => e.LinkUrl)
                .HasMaxLength(255)
                .HasColumnName("Link_Url");
            entity.Property(e => e.Page).HasMaxLength(50);
            entity.Property(e => e.Position).HasMaxLength(50);
            entity.Property(e => e.ProductId).HasColumnName("Product_Id");
            entity.Property(e => e.StartTime)
                .HasColumnType("datetime")
                .HasColumnName("Start_Time");
            entity.Property(e => e.Title).HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Banners)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK__Banners__Created__56B3DD81");

            entity.HasOne(d => d.Product).WithMany(p => p.Banners)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK__Banners__Product__57A801BA");
        });

        modelBuilder.Entity<Barcode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Barcodes__3214EC0707244FC6");

            entity.HasIndex(e => e.Barcode1, "UQ__Barcodes__177800D30BB823BA").IsUnique();

            entity.Property(e => e.Barcode1)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Barcode");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.ProductId).HasColumnName("Product_Id");
            entity.Property(e => e.SkuGroupId).HasColumnName("SkuGroup_Id");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Product).WithMany(p => p.Barcodes)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK__Barcodes__Produc__589C25F3");
        });

        modelBuilder.Entity<Carrier>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Carriers__3214EC07E790F8A6");

            entity.Property(e => e.Contact).HasMaxLength(100);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Cart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Carts__3214EC07BB2CD2E9");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.MemberId).HasColumnName("Member_Id");

            entity.HasOne(d => d.Member).WithMany(p => p.Carts)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Carts__Member_Id__5C6CB6D7");
        });

        modelBuilder.Entity<CartItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Cart_Ite__3214EC07FC7F840C");

            entity.ToTable("Cart_Items");

            entity.Property(e => e.AttributeValueId).HasColumnName("Attribute_Value_Id");
            entity.Property(e => e.CartId).HasColumnName("Cart_Id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.PriceAtAdded)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Price_At_Added");
            entity.Property(e => e.ProductId).HasColumnName("Product_Id");

            entity.HasOne(d => d.AttributeValue).WithMany(p => p.CartItems)
                .HasForeignKey(d => d.AttributeValueId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Cart_Item__Attri__59904A2C");

            entity.HasOne(d => d.Cart).WithMany(p => p.CartItems)
                .HasForeignKey(d => d.CartId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Cart_Item__Cart___5A846E65");

            entity.HasOne(d => d.Product).WithMany(p => p.CartItems)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Cart_Item__Produ__5B78929E");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Categori__3214EC07CE53884E");

            entity.HasIndex(e => e.Name, "UQ__Categori__737584F6B486F826").IsUnique();

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<ChatMessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Chat_Mes__3214EC074CFD1D21");

            entity.ToTable("Chat_Messages");

            entity.Property(e => e.ChatRoomId).HasColumnName("Chat_Room_Id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.FileUrl)
                .HasMaxLength(500)
                .HasColumnName("File_Url");
            entity.Property(e => e.IsDeleted).HasColumnName("Is_Deleted");
            entity.Property(e => e.IsReadAdmin)
                .HasDefaultValue(false)
                .HasColumnName("Is_Read_Admin");
            entity.Property(e => e.IsReadMember)
                .HasDefaultValue(false)
                .HasColumnName("Is_Read_Member");
            entity.Property(e => e.IsReadSeller)
                .HasDefaultValue(false)
                .HasColumnName("Is_Read_Seller");
            entity.Property(e => e.MessageType)
                .IsRequired()
                .HasMaxLength(20)
                .HasDefaultValue("text")
                .HasColumnName("Message_Type");
            entity.Property(e => e.SenderId).HasColumnName("Sender_Id");
            entity.Property(e => e.SenderType)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("Sender_Type");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.ChatRoom).WithMany(p => p.ChatMessages)
                .HasForeignKey(d => d.ChatRoomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Chat_Mess__Chat___5D60DB10");
        });

        modelBuilder.Entity<ChatRoom>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Chat_Roo__3214EC0782A82938");

            entity.ToTable("Chat_Rooms");

            entity.Property(e => e.AdminId).HasColumnName("Admin_Id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.LastMessageAt)
                .HasColumnType("datetime")
                .HasColumnName("Last_Message_At");
            entity.Property(e => e.MemberId).HasColumnName("Member_Id");
            entity.Property(e => e.RoomName)
                .HasMaxLength(100)
                .HasColumnName("Room_Name");
            entity.Property(e => e.SellerId).HasColumnName("Seller_Id");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20)
                .HasDefaultValue("active");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Admin).WithMany(p => p.ChatRooms)
                .HasForeignKey(d => d.AdminId)
                .HasConstraintName("FK__Chat_Room__Admin__5E54FF49");

            entity.HasOne(d => d.Member).WithMany(p => p.ChatRooms)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK__Chat_Room__Membe__5F492382");

            entity.HasOne(d => d.Seller).WithMany(p => p.ChatRooms)
                .HasForeignKey(d => d.SellerId)
                .HasConstraintName("FK__Chat_Room__Selle__603D47BB");
        });

        modelBuilder.Entity<CommentLike>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Comment___3214EC0792A46811");

            entity.ToTable("Comment_Likes");

            entity.Property(e => e.CommentId).HasColumnName("Comment_Id");
            entity.Property(e => e.CommentType)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("Comment_Type");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.MembersId).HasColumnName("Members_Id");

            entity.HasOne(d => d.Members).WithMany(p => p.CommentLikes)
                .HasForeignKey(d => d.MembersId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Comment_L__Membe__61316BF4");
        });

        modelBuilder.Entity<ContentPublishingSchedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Content___3214EC0710841874");

            entity.ToTable("Content_Publishing_Schedule");

            entity.Property(e => e.ActionType)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("Action_Type");
            entity.Property(e => e.ContentId).HasColumnName("Content_Id");
            entity.Property(e => e.ContentType)
                .IsRequired()
                .HasMaxLength(30)
                .HasColumnName("Content_Type");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.CreatedBy).HasColumnName("Created_By");
            entity.Property(e => e.ErrorMessage)
                .HasMaxLength(500)
                .HasColumnName("Error_Message");
            entity.Property(e => e.ExecutedAt)
                .HasColumnType("datetime")
                .HasColumnName("Executed_At");
            entity.Property(e => e.ScheduledTime)
                .HasColumnType("datetime")
                .HasColumnName("Scheduled_Time");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasDefaultValue("pending");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ContentPublishingSchedules)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK__Content_P__Creat__6225902D");
        });

        modelBuilder.Entity<ContentStatistic>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Content___3214EC078369AF5C");

            entity.ToTable("Content_Statistics");

            entity.Property(e => e.CommentCount)
                .HasDefaultValue(0)
                .HasColumnName("Comment_Count");
            entity.Property(e => e.ContentId).HasColumnName("Content_Id");
            entity.Property(e => e.ContentType)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("Content_Type");
            entity.Property(e => e.LastUpdated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Last_Updated");
            entity.Property(e => e.LikeCount)
                .HasDefaultValue(0)
                .HasColumnName("Like_Count");
            entity.Property(e => e.ShareCount)
                .HasDefaultValue(0)
                .HasColumnName("Share_Count");
            entity.Property(e => e.ViewCount)
                .HasDefaultValue(0)
                .HasColumnName("View_Count");
        });

        modelBuilder.Entity<Coupon>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Coupons__3214EC074141C524");

            entity.Property(e => e.ApplicableLevelId).HasColumnName("Applicable_Level_Id");
            entity.Property(e => e.CategoryId).HasColumnName("Category_Id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DiscountAmount).HasColumnName("Discount_Amount");
            entity.Property(e => e.DiscountType)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("Discount_Type");
            entity.Property(e => e.ExpiredAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Expired_At");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("Is_Active");
            entity.Property(e => e.MinSpend).HasColumnName("Min_Spend");
            entity.Property(e => e.SellersId).HasColumnName("Sellers_Id");
            entity.Property(e => e.StartAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Start_At");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");
            entity.Property(e => e.UsageLimit).HasColumnName("Usage_Limit");
            entity.Property(e => e.UsedCount).HasColumnName("Used_Count");

            entity.HasOne(d => d.ApplicableLevel).WithMany(p => p.Coupons)
                .HasForeignKey(d => d.ApplicableLevelId)
                .HasConstraintName("FK__Coupons__Applica__69C6B1F5");

            entity.HasOne(d => d.Category).WithMany(p => p.Coupons)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK__Coupons__Categor__6ABAD62E");

            entity.HasOne(d => d.Sellers).WithMany(p => p.Coupons)
                .HasForeignKey(d => d.SellersId)
                .HasConstraintName("FK__Coupons__Sellers__6BAEFA67");
        });

        modelBuilder.Entity<CouponCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Coupon_C__3214EC071D24C0D9");

            entity.ToTable("Coupon_Categories");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.IsActive).HasColumnName("Is_Active");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Scope)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.SortOrder).HasColumnName("Sort_Order");
        });

        modelBuilder.Entity<CouponDispatchTask>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Coupon_D__3214EC07F2BCA6E2");

            entity.ToTable("Coupon_Dispatch_Tasks");

            entity.Property(e => e.CouponId).HasColumnName("Coupon_Id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.CreatedByAdminId).HasColumnName("Created_By_Admin_Id");
            entity.Property(e => e.DispatchType)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Dispatch_Type");
            entity.Property(e => e.ErrorMessage).HasColumnName("Error_Message");
            entity.Property(e => e.ProgressCount).HasColumnName("Progress_Count");
            entity.Property(e => e.ScheduledTime)
                .HasColumnType("datetime")
                .HasColumnName("Scheduled_Time");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20)
                .HasDefaultValue("pending");
            entity.Property(e => e.TargetCriteria)
                .IsRequired()
                .HasColumnName("Target_Criteria");
            entity.Property(e => e.TaskName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("Task_Name");
            entity.Property(e => e.TotalTargetCount).HasColumnName("Total_Target_Count");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Coupon).WithMany(p => p.CouponDispatchTasks)
                .HasForeignKey(d => d.CouponId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Coupon_Di__Coupo__6319B466");

            entity.HasOne(d => d.CreatedByAdmin).WithMany(p => p.CouponDispatchTasks)
                .HasForeignKey(d => d.CreatedByAdminId)
                .HasConstraintName("FK__Coupon_Di__Creat__640DD89F");
        });

        modelBuilder.Entity<CouponNotification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Coupon_N__3214EC0706BCE264");

            entity.ToTable("Coupon_Notification");

            entity.Property(e => e.Channel).HasMaxLength(20);
            entity.Property(e => e.CouponId).HasColumnName("Coupon_Id");
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(256)
                .HasColumnName("Email_Address");
            entity.Property(e => e.EmailRetry).HasColumnName("Email_Retry");
            entity.Property(e => e.EmailSentAt)
                .HasColumnType("datetime")
                .HasColumnName("Email_Sent_At");
            entity.Property(e => e.EmailStatus)
                .HasMaxLength(20)
                .HasColumnName("Email_Status");
            entity.Property(e => e.IsDeleted).HasColumnName("Is_Deleted");
            entity.Property(e => e.MemberId).HasColumnName("Member_Id");
            entity.Property(e => e.Message)
                .IsRequired()
                .HasMaxLength(2000);
            entity.Property(e => e.SellerId).HasColumnName("Seller_Id");
            entity.Property(e => e.SendStatus)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("Send_Status");
            entity.Property(e => e.SentAt)
                .HasColumnType("datetime")
                .HasColumnName("Sent_At");

            entity.HasOne(d => d.Coupon).WithMany(p => p.CouponNotifications)
                .HasForeignKey(d => d.CouponId)
                .HasConstraintName("FK__Coupon_No__Coupo__6501FCD8");

            entity.HasOne(d => d.Member).WithMany(p => p.CouponNotifications)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Coupon_No__Membe__65F62111");

            entity.HasOne(d => d.Seller).WithMany(p => p.CouponNotifications)
                .HasForeignKey(d => d.SellerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Coupon_No__Selle__66EA454A");
        });

        modelBuilder.Entity<CouponReturnHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Coupon_R__3214EC074F1F2BE4");

            entity.ToTable("Coupon_Return_History");

            entity.Property(e => e.CouponId).HasColumnName("Coupon_Id");
            entity.Property(e => e.IssuedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Issued_At");
            entity.Property(e => e.MemberId).HasColumnName("Member_Id");
            entity.Property(e => e.Note).HasMaxLength(255);
            entity.Property(e => e.OrderAmount).HasColumnName("Order_Amount");
            entity.Property(e => e.ReturnAmount).HasColumnName("Return_Amount");

            entity.HasOne(d => d.Coupon).WithMany(p => p.CouponReturnHistories)
                .HasForeignKey(d => d.CouponId)
                .HasConstraintName("FK__Coupon_Re__Coupo__67DE6983");

            entity.HasOne(d => d.Member).WithMany(p => p.CouponReturnHistories)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK__Coupon_Re__Membe__68D28DBC");
        });

        modelBuilder.Entity<Member>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Members__3214EC0707E3210A");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.IsActive).HasColumnName("Is_Active");
            entity.Property(e => e.IsEmailVerified).HasColumnName("Is_Email_Verified");
            entity.Property(e => e.PasswordHash)
                .HasMaxLength(255)
                .HasColumnName("Password_Hash");
            entity.Property(e => e.RegisteredVia)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("Registered_Via");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.LevelNavigation).WithMany(p => p.Members)
                .HasForeignKey(d => d.Level)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Members__Level__753864A1");
        });

        modelBuilder.Entity<MemberAddress>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Member_A__3214EC0743010131");

            entity.ToTable("Member_Addresses");

            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.District).HasMaxLength(50);
            entity.Property(e => e.IsDefault).HasColumnName("Is_Default");
            entity.Property(e => e.MembersId).HasColumnName("Members_Id");
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(20)
                .HasColumnName("Phone_Number");
            entity.Property(e => e.RecipientName)
                .HasMaxLength(100)
                .HasColumnName("Recipient_Name");
            entity.Property(e => e.StreetAddress)
                .HasMaxLength(255)
                .HasColumnName("Street_Address");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(10)
                .HasColumnName("Zip_Code");

            entity.HasOne(d => d.Members).WithMany(p => p.MemberAddresses)
                .HasForeignKey(d => d.MembersId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Member_Ad__Membe__6CA31EA0");
        });

        modelBuilder.Entity<MemberCoupon>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Member_C__3214EC07F22276C5");

            entity.ToTable("Member_Coupons");

            entity.HasIndex(e => e.VerificationCode, "UQ__Member_C__CE2AA58EB8A5A705").IsUnique();

            entity.Property(e => e.AssignedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Assigned_At");
            entity.Property(e => e.CouponId).HasColumnName("Coupon_Id");
            entity.Property(e => e.ExpirationReminderSent).HasColumnName("Expiration_Reminder_Sent");
            entity.Property(e => e.MemberId).HasColumnName("Member_Id");
            entity.Property(e => e.OrderId).HasColumnName("Order_Id");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20)
                .HasDefaultValue("active");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");
            entity.Property(e => e.UsedAt)
                .HasColumnType("datetime")
                .HasColumnName("Used_At");
            entity.Property(e => e.VerificationCode)
                .HasMaxLength(50)
                .HasColumnName("Verification_Code");

            entity.HasOne(d => d.Coupon).WithMany(p => p.MemberCoupons)
                .HasForeignKey(d => d.CouponId)
                .HasConstraintName("FK__Member_Co__Coupo__6D9742D9");

            entity.HasOne(d => d.Member).WithMany(p => p.MemberCoupons)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK__Member_Co__Membe__6E8B6712");

            entity.HasOne(d => d.Order).WithMany(p => p.MemberCoupons)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK__Member_Co__Order__6F7F8B4B");
        });

        modelBuilder.Entity<MemberFollow>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Member_F__3214EC07C1C1D2ED");

            entity.ToTable("Member_Follows");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.FollowerId).HasColumnName("Follower_Id");
            entity.Property(e => e.FollowingId).HasColumnName("Following_Id");

            entity.HasOne(d => d.Follower).WithMany(p => p.MemberFollowFollowers)
                .HasForeignKey(d => d.FollowerId)
                .HasConstraintName("FK__Member_Fo__Follo__7073AF84");

            entity.HasOne(d => d.Following).WithMany(p => p.MemberFollowFollowings)
                .HasForeignKey(d => d.FollowingId)
                .HasConstraintName("FK__Member_Fo__Follo__7167D3BD");
        });

        modelBuilder.Entity<MemberProfile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Member_P__3214EC075911979A");

            entity.ToTable("Member_Profiles");

            entity.Property(e => e.BirthDate).HasColumnName("Birth_Date");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.Gender)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.MemberAccount)
                .HasMaxLength(255)
                .HasColumnName("Member_Account");
            entity.Property(e => e.MembersId).HasColumnName("Members_Id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.ProfileImg)
                .HasMaxLength(255)
                .HasColumnName("Profile_Img");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Members)
       .WithOne(p => p.MemberProfile)  // 注意：這裡改成 WithOne，並對應 Member 裡的單一 MemberProfile 屬性
       .HasForeignKey<MemberProfile>(d => d.MembersId)
       .OnDelete(DeleteBehavior.ClientSetNull)
       .HasConstraintName("FK__Member_Pr__Membe__52E34C9D");
        });

        modelBuilder.Entity<MemberStat>(entity =>
        {
            entity.HasKey(e => e.MemberId).HasName("PK__Member_S__42A68F477A57AFEC");

            entity.ToTable("Member_Stats");

            entity.Property(e => e.MemberId)
                .ValueGeneratedNever()
                .HasColumnName("Member_Id");
            entity.Property(e => e.CurrentLevelId).HasColumnName("Current_Level_Id");
            entity.Property(e => e.TotalPoints).HasColumnName("Total_Points");
            entity.Property(e => e.TotalSpent).HasColumnName("Total_Spent");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.CurrentLevel).WithMany(p => p.MemberStats)
                .HasForeignKey(d => d.CurrentLevelId)
                .HasConstraintName("FK__Member_St__Curre__73501C2F");

            entity.HasOne(d => d.Member).WithOne(p => p.MemberStat)
                .HasForeignKey<MemberStat>(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Member_St__Membe__74444068");
        });

        modelBuilder.Entity<MembershipLevel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Membersh__3214EC07536F29EC");

            entity.ToTable("Membership_Levels");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.IsActive).HasColumnName("Is_Active");
            entity.Property(e => e.LevelName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Level_Name");
            entity.Property(e => e.MonthlyCouponId).HasColumnName("Monthly_Coupon_Id");
            entity.Property(e => e.RequiredAmount).HasColumnName("Required_Amount");

            entity.HasOne(d => d.MonthlyCoupon).WithMany(p => p.MembershipLevels)
                .HasForeignKey(d => d.MonthlyCouponId)
                .HasConstraintName("FK__Membershi__Month__762C88DA");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Notifica__3214EC0778DB4AFE");

            entity.ToTable("Notification");

            entity.Property(e => e.Category)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.Channel).HasMaxLength(20);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(256)
                .HasColumnName("Email_Address");
            entity.Property(e => e.EmailRetry).HasColumnName("Email_Retry");
            entity.Property(e => e.EmailSentAt)
                .HasColumnType("datetime")
                .HasColumnName("Email_Sent_At");
            entity.Property(e => e.EmailStatus)
                .HasMaxLength(20)
                .HasColumnName("Email_Status");
            entity.Property(e => e.IsDeleted).HasColumnName("Is_Deleted");
            entity.Property(e => e.MemberId).HasColumnName("Member_Id");
            entity.Property(e => e.Message)
                .IsRequired()
                .HasMaxLength(2000);

            entity.Property(e => e.SellerId).HasColumnName("Seller_Id");
            entity.Property(e => e.SentAt)
                .HasColumnType("datetime")
                .HasColumnName("Sent_At");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

			entity.Property(e => e.CreatedAt)
				.HasDefaultValueSql("(getdate())")
				.HasColumnType("datetime")
				.HasColumnName("Created_At");
			entity.Property(e => e.UpdatedAt)
				.HasDefaultValueSql("(getdate())")
				.HasColumnType("datetime")
				.HasColumnName("Updated_At");

			entity.HasOne(d => d.Member).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK__Notificat__Membe__7720AD13");

            entity.HasOne(d => d.Seller).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.SellerId)
                .HasConstraintName("FK__Notificat__Selle__7814D14C");
        });

        modelBuilder.Entity<OfficialPost>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Official__3214EC07128D3F87");

            entity.ToTable("Official_Posts");

            entity.Property(e => e.Category)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Content).IsRequired();
            entity.Property(e => e.CoverImage)
                .HasMaxLength(255)
                .HasColumnName("Cover_Image");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.CreatedBy).HasColumnName("Created_By");
            entity.Property(e => e.PublishedAt)
                .HasColumnType("datetime")
                .HasColumnName("Published_At");
            entity.Property(e => e.ReadingTime).HasColumnName("Reading_Time");
            entity.Property(e => e.SeoDescription)
                .HasMaxLength(160)
                .HasColumnName("SEO_Description");
            entity.Property(e => e.SeoTitle)
                .HasMaxLength(60)
                .HasColumnName("SEO_Title");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20)
                .HasDefaultValue("draft");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.OfficialPosts)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Official___Creat__7CD98669");
        });

        modelBuilder.Entity<OfficialPostComment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Official__3214EC07CCF14220");

            entity.ToTable("Official_Post_Comments");

            entity.Property(e => e.Content)
                .IsRequired()
                .HasMaxLength(1000);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.MembersId).HasColumnName("Members_Id");
            entity.Property(e => e.OfficialPostId).HasColumnName("Official_Post_Id");
            entity.Property(e => e.ParentCommentId).HasColumnName("Parent_Comment_Id");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasDefaultValue("active");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Members).WithMany(p => p.OfficialPostComments)
                .HasForeignKey(d => d.MembersId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Official___Membe__7908F585");

            entity.HasOne(d => d.OfficialPost).WithMany(p => p.OfficialPostComments)
                .HasForeignKey(d => d.OfficialPostId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Official___Offic__79FD19BE");

            entity.HasOne(d => d.ParentComment).WithMany(p => p.InverseParentComment)
                .HasForeignKey(d => d.ParentCommentId)
                .HasConstraintName("FK__Official___Paren__7AF13DF7");
        });

        modelBuilder.Entity<OfficialPostImage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Official__3214EC07E9A1E97C");

            entity.ToTable("Official_Post_Images");

            entity.Property(e => e.ImagePath)
                .HasMaxLength(255)
                .HasColumnName("Image_Path");
            entity.Property(e => e.PostId).HasColumnName("Post_Id");
            entity.Property(e => e.SortOrder).HasColumnName("Sort_Order");

            entity.HasOne(d => d.Post).WithMany(p => p.OfficialPostImages)
                .HasForeignKey(d => d.PostId)
                .HasConstraintName("FK__Official___Post___7BE56230");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Orders__3214EC07DB894AD5");

            entity.Property(e => e.AddressDetail)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("Address_Detail");
            entity.Property(e => e.AddressId).HasColumnName("Address_Id");
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CouponId).HasColumnName("Coupon_Id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeliveryMethod)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Delivery_Method");
            entity.Property(e => e.DiscountAmount)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Discount_Amount");
            entity.Property(e => e.DiscountType)
                .HasMaxLength(50)
                .HasColumnName("Discount_Type");
            entity.Property(e => e.District)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FreeShipping)
                .HasDefaultValue(false)
                .HasColumnName("Free_Shipping");
            entity.Property(e => e.MemberId).HasColumnName("Member_Id");
            entity.Property(e => e.OrderStatus)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Order_Status");
            entity.Property(e => e.PaymentMethod)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Payment_Method");
            entity.Property(e => e.PaymentStatus)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Payment_Status");
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("Phone_Number");
            entity.Property(e => e.PointsDeductAmount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Points_Deduct_Amount");
            entity.Property(e => e.RecipientName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("Recipient_Name");
            entity.Property(e => e.SellersId).HasColumnName("Sellers_Id");
            entity.Property(e => e.ShippingFee)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Shipping_Fee");
            entity.Property(e => e.SubtotalAmount)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Subtotal_Amount");
            entity.Property(e => e.TotalAmount)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Total_Amount");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");
            entity.Property(e => e.UsedPoints)
                .HasDefaultValue(0)
                .HasColumnName("Used_Points");

            entity.HasOne(d => d.Address).WithMany(p => p.Orders)
                .HasForeignKey(d => d.AddressId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Orders__Address___047AA831");

            entity.HasOne(d => d.Coupon).WithMany(p => p.Orders)
                .HasForeignKey(d => d.CouponId)
                .HasConstraintName("FK__Orders__Coupon_I__056ECC6A");

            entity.HasOne(d => d.Member).WithMany(p => p.Orders)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Orders__Member_I__0662F0A3");

            entity.HasOne(d => d.Sellers).WithMany(p => p.Orders)
                .HasForeignKey(d => d.SellersId)
                .HasConstraintName("FK__Orders__Sellers___075714DC");
        });

        modelBuilder.Entity<OrderAddress>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Order_Ad__3214EC07B8B61821");

            entity.ToTable("Order_Addresses");

            entity.Property(e => e.AddressType)
                .HasMaxLength(20)
                .HasColumnName("Address_Type");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.FullAddress)
                .HasMaxLength(255)
                .HasColumnName("Full_Address");
            entity.Property(e => e.IsDefault).HasColumnName("Is_Default");
            entity.Property(e => e.MemberId).HasColumnName("Member_Id");
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(20)
                .HasColumnName("Phone_Number");
            entity.Property(e => e.RecipientName)
                .HasMaxLength(100)
                .HasColumnName("Recipient_Name");
            entity.Property(e => e.StoreId)
                .HasMaxLength(50)
                .HasColumnName("Store_Id");
            entity.Property(e => e.StoreType)
                .HasMaxLength(20)
                .HasColumnName("Store_Type");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(10)
                .HasColumnName("Zip_Code");

            entity.HasOne(d => d.Member).WithMany(p => p.OrderAddresses)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK__Order_Add__Membe__7DCDAAA2");
        });

        modelBuilder.Entity<OrderDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Order_De__3214EC07DCF3EBEC");

            entity.ToTable("Order_Details");

            entity.Property(e => e.AttributeValueId).HasColumnName("Attribute_Value_Id");
            entity.Property(e => e.OrderId).HasColumnName("Order_Id");
            entity.Property(e => e.ProductId).HasColumnName("Product_Id");
            entity.Property(e => e.Subtotal).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.UnitPrice)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Unit_Price");

            entity.HasOne(d => d.AttributeValue).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.AttributeValueId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Order_Det__Attri__7EC1CEDB");

            entity.HasOne(d => d.Order).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Order_Det__Order__7FB5F314");

            entity.HasOne(d => d.Product).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Order_Det__Produ__00AA174D");
        });

        modelBuilder.Entity<OrderNotification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Order_No__3214EC07AEBE9261");

            entity.ToTable("Order_Notification");

            entity.Property(e => e.Category)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Channel).HasMaxLength(20);
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(256)
                .HasColumnName("Email_Address");
            entity.Property(e => e.EmailRetry).HasColumnName("Email_Retry");
            entity.Property(e => e.EmailSentAt)
                .HasColumnType("datetime")
                .HasColumnName("Email_Sent_At");
            entity.Property(e => e.EmailStatus)
                .HasMaxLength(20)
                .HasColumnName("Email_Status");
            entity.Property(e => e.IsDeleted).HasColumnName("Is_Deleted");
            entity.Property(e => e.MemberId).HasColumnName("Member_Id");
            entity.Property(e => e.Message)
                .IsRequired()
                .HasMaxLength(2000);
            entity.Property(e => e.OrderId).HasColumnName("Order_Id");
            entity.Property(e => e.SellerId).HasColumnName("Seller_Id");
            entity.Property(e => e.SendStatus)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("Send_Status");
            entity.Property(e => e.SentAt)
                .HasColumnType("datetime")
                .HasColumnName("Sent_At");

            entity.HasOne(d => d.Member).WithMany(p => p.OrderNotifications)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK__Order_Not__Membe__019E3B86");

            entity.HasOne(d => d.Order).WithMany(p => p.OrderNotifications)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK__Order_Not__Order__02925FBF");

            entity.HasOne(d => d.Seller).WithMany(p => p.OrderNotifications)
                .HasForeignKey(d => d.SellerId)
                .HasConstraintName("FK__Order_Not__Selle__038683F8");
        });

        modelBuilder.Entity<PasswordResetCode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Password__3214EC07FECACEC8");

            entity.ToTable("Password_Reset_Codes");

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.ContactInfo)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("Contact_Info");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.ExpiresAt)
                .HasColumnType("datetime")
                .HasColumnName("Expires_At");
            entity.Property(e => e.IsUsed).HasColumnName("Is_Used");
            entity.Property(e => e.MembersId).HasColumnName("Members_Id");

            entity.HasOne(d => d.Members).WithMany(p => p.PasswordResetCodes)
                .HasForeignKey(d => d.MembersId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Password___Membe__084B3915");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Payments__3214EC07648644B8");

            entity.Property(e => e.CardNumberLast4)
                .HasMaxLength(4)
                .HasColumnName("Card_Number_Last4");
            entity.Property(e => e.ErrorMessage)
                .HasMaxLength(255)
                .HasColumnName("Error_Message");
            entity.Property(e => e.HashVerified)
                .HasDefaultValue(false)
                .HasColumnName("Hash_Verified");
            entity.Property(e => e.MemberAgent)
                .HasMaxLength(255)
                .HasColumnName("Member_Agent");
            entity.Property(e => e.OrderId).HasColumnName("Order_Id");
            entity.Property(e => e.RawRequest).HasColumnName("Raw_Request");
            entity.Property(e => e.RawResponse).HasColumnName("Raw_Response");
            entity.Property(e => e.SourceIp)
                .HasMaxLength(50)
                .HasColumnName("Source_IP");
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.TransactionTime)
                .HasColumnType("datetime")
                .HasColumnName("Transaction_Time");

            entity.HasOne(d => d.Order).WithMany(p => p.Payments)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Payments__Order___093F5D4E");
        });

        modelBuilder.Entity<PaymentRecord>(entity =>
        {
            entity.ToTable("Payment_Records");

            entity.Property(e => e.MerchantTradeNo).HasMaxLength(20);
            entity.Property(e => e.TradeNo).HasMaxLength(20);
            entity.Property(e => e.PaymentType).HasMaxLength(50);
            entity.Property(e => e.RtnMsg).HasMaxLength(200);
            entity.Property(e => e.PaymentTypeChargeFee).HasColumnType("decimal(18,2)");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime2");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime2");
        });

        modelBuilder.Entity<PointsLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Points_L__3214EC072E6DD6B2");

            entity.ToTable("Points_Log");

            entity.HasIndex(e => e.VerificationCode, "UQ__Points_L__CE2AA58EB0FD13D5").IsUnique();

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.ExpiredAt)
                .HasColumnType("datetime")
                .HasColumnName("Expired_At");
            entity.Property(e => e.MemberId).HasColumnName("Member_Id");
            entity.Property(e => e.Note).HasMaxLength(255);
            entity.Property(e => e.TransactionId)
                .HasMaxLength(50)
                .HasColumnName("Transaction_Id");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");
            entity.Property(e => e.VerificationCode)
                .HasMaxLength(50)
                .HasColumnName("Verification_Code");

            entity.HasOne(d => d.Member).WithMany(p => p.PointsLogs)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK__Points_Lo__Membe__0A338187");
        });

        modelBuilder.Entity<PointsLogError>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Points_L__3214EC079943E004");

            entity.ToTable("Points_Log_Error");

            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.ErrorDetails).HasColumnName("Error_Details");
            entity.Property(e => e.ErrorType)
                .HasMaxLength(50)
                .HasColumnName("Error_Type");
            entity.Property(e => e.MemberId).HasColumnName("Member_Id");

            entity.HasOne(d => d.Member).WithMany(p => p.PointsLogErrors)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK__Points_Lo__Membe__0B27A5C0");
        });

        modelBuilder.Entity<Post>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Posts__3214EC0799BFB2FA");

            entity.Property(e => e.Content).IsRequired();
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.Image)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.MembersId).HasColumnName("Members_Id");
            entity.Property(e => e.PublishedAt)
                .HasColumnType("datetime")
                .HasColumnName("Published_At");
            entity.Property(e => e.RejectedReason)
                .HasMaxLength(255)
                .HasColumnName("Rejected_Reason");
            entity.Property(e => e.ReviewedAt)
                .HasColumnType("datetime")
                .HasColumnName("Reviewed_At");
            entity.Property(e => e.ReviewedBy).HasColumnName("Reviewed_By");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20)
                .HasDefaultValue("pending");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Members).WithMany(p => p.Posts)
                .HasForeignKey(d => d.MembersId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Posts__Members_I__12C8C788");

            entity.HasOne(d => d.ReviewedByNavigation).WithMany(p => p.Posts)
                .HasForeignKey(d => d.ReviewedBy)
                .HasConstraintName("FK__Posts__Reviewed___13BCEBC1");
        });

        modelBuilder.Entity<PostComment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Post_Com__3214EC070B6F7403");

            entity.ToTable("Post_Comments");

            entity.Property(e => e.Content)
                .IsRequired()
                .HasMaxLength(1000);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.MembersId).HasColumnName("Members_Id");
            entity.Property(e => e.ParentCommentId).HasColumnName("Parent_Comment_Id");
            entity.Property(e => e.PostId).HasColumnName("Post_Id");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasDefaultValue("active");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Members).WithMany(p => p.PostComments)
                .HasForeignKey(d => d.MembersId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Post_Comm__Membe__0C1BC9F9");

            entity.HasOne(d => d.ParentComment).WithMany(p => p.InverseParentComment)
                .HasForeignKey(d => d.ParentCommentId)
                .HasConstraintName("FK__Post_Comm__Paren__0D0FEE32");

            entity.HasOne(d => d.Post).WithMany(p => p.PostComments)
                .HasForeignKey(d => d.PostId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Post_Comm__Post___0E04126B");
        });

        modelBuilder.Entity<PostLike>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Post_Lik__3214EC070F0BEE3E");

            entity.ToTable("Post_Likes");

            entity.Property(e => e.MembersId).HasColumnName("Members_Id");
            entity.Property(e => e.PostId).HasColumnName("Post_Id");

            entity.HasOne(d => d.Members).WithMany(p => p.PostLikes)
                .HasForeignKey(d => d.MembersId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Post_Like__Membe__0EF836A4");

            entity.HasOne(d => d.Post).WithMany(p => p.PostLikes)
                .HasForeignKey(d => d.PostId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Post_Like__Post___0FEC5ADD");
        });

        modelBuilder.Entity<PostProduct>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Post_Pro__3214EC07E66C109E");

            entity.ToTable("Post_Products");

            entity.Property(e => e.PostId).HasColumnName("Post_Id");
            entity.Property(e => e.ProductId).HasColumnName("Product_Id");

            entity.HasOne(d => d.Post).WithMany(p => p.PostProducts)
                .HasForeignKey(d => d.PostId)
                .HasConstraintName("FK__Post_Prod__Post___10E07F16");

            entity.HasOne(d => d.Product).WithMany(p => p.PostProducts)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK__Post_Prod__Produ__11D4A34F");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Products__3214EC07E9D15FF7");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DiscountPrice).HasColumnName("Discount_Price");
            entity.Property(e => e.IsActive).HasColumnName("Is_Active");
            entity.Property(e => e.IsDiscount).HasColumnName("Is_Discount");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.SellersId).HasColumnName("Sellers_Id");
            entity.Property(e => e.SubCategoryId).HasColumnName("Sub_Category_Id");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Sellers).WithMany(p => p.Products)
                .HasForeignKey(d => d.SellersId)
                .HasConstraintName("FK__Products__Seller__178D7CA5");

            entity.HasOne(d => d.SubCategory).WithMany(p => p.Products)
                .HasForeignKey(d => d.SubCategoryId)
                .HasConstraintName("FK__Products__Sub_Ca__1881A0DE");
        });

        modelBuilder.Entity<ProductAttributeValue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Product___3214EC073727AD1A");

            entity.ToTable("Product_Attribute_Values");

            entity.Property(e => e.AdditionalPrice)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Additional_Price");
            entity.Property(e => e.AttributeValueId).HasColumnName("Attribute_Value_Id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.ProductId).HasColumnName("Product_Id");
            entity.Property(e => e.Sku).HasMaxLength(100);
            entity.Property(e => e.SkuGroupId).HasColumnName("SkuGroup_Id");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.AttributeValue).WithMany(p => p.ProductAttributeValues)
                .HasForeignKey(d => d.AttributeValueId)
                .HasConstraintName("FK__Product_A__Attri__14B10FFA");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductAttributeValues)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK__Product_A__Produ__15A53433");
        });

        modelBuilder.Entity<ProductImage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Product___3214EC07BCB5D22F");

            entity.ToTable("Product_Images");

            entity.Property(e => e.ImagesUrl)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("Images_Url");
            entity.Property(e => e.ProductId).HasColumnName("Product_Id");
            entity.Property(e => e.SkuId).HasColumnName("Sku_Id");
            entity.Property(e => e.SortOrder).HasColumnName("Sort_Order");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductImages)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Product_I__Produ__1699586C");
        });

        modelBuilder.Entity<RestockNotification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Restock___3214EC07400CD4BE");

            entity.ToTable("Restock_Notification");

            entity.Property(e => e.Channel).HasMaxLength(20);
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(256)
                .HasColumnName("Email_Address");
            entity.Property(e => e.EmailRetry).HasColumnName("Email_Retry");
            entity.Property(e => e.EmailSentAt)
                .HasColumnType("datetime")
                .HasColumnName("Email_Sent_At");
            entity.Property(e => e.EmailStatus)
                .HasMaxLength(20)
                .HasColumnName("Email_Status");
            entity.Property(e => e.SellersId).HasColumnName("Sellers_Id");
            entity.Property(e => e.SendStatus)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("Send_Status");
            entity.Property(e => e.SentAt)
                .HasColumnType("datetime")
                .HasColumnName("Sent_At");
            entity.Property(e => e.Sku)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.StockStatus)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("Stock_Status");

            entity.HasOne(d => d.Sellers).WithMany(p => p.RestockNotifications)
                .HasForeignKey(d => d.SellersId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Restock_N__Selle__1975C517");
        });

        modelBuilder.Entity<Return>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Returns__3214EC07ACA085ED");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.MemberId).HasColumnName("Member_Id");
            entity.Property(e => e.OrderId).HasColumnName("Order_Id");
            entity.Property(e => e.RefundedPoints).HasColumnName("Refunded_Points");

            entity.HasOne(d => d.Member).WithMany(p => p.Returns)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK__Returns__Member___1A69E950");

            entity.HasOne(d => d.Order).WithMany(p => p.Returns)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK__Returns__Order_I__1B5E0D89");
        });

        modelBuilder.Entity<Review>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Reviews__3214EC0748EC35B0");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.IsVerified).HasColumnName("Is_Verified");
            entity.Property(e => e.MemberId).HasColumnName("Member_Id");
            entity.Property(e => e.ProductId).HasColumnName("Product_Id");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Member).WithMany(p => p.Reviews)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK__Reviews__Member___1C5231C2");

            entity.HasOne(d => d.Product).WithMany(p => p.Reviews)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK__Reviews__Product__1D4655FB");
        });

        modelBuilder.Entity<Seller>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Sellers__3214EC076E43500B");

            entity.HasIndex(e => e.MembersId, "UQ__Sellers__0603546719B922E5").IsUnique();

            entity.Property(e => e.ApplicationStatus)
                .IsRequired()
                .HasMaxLength(20)
                .HasDefaultValue("pending")
                .HasColumnName("Application_Status");
            entity.Property(e => e.AppliedAt)
                .HasColumnType("datetime")
                .HasColumnName("Applied_At");
            entity.Property(e => e.ApprovedAt)
                .HasColumnType("datetime")
                .HasColumnName("Approved_At");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.IdNumber)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("ID_Number");
            entity.Property(e => e.IsActive).HasColumnName("Is_Active");
            entity.Property(e => e.MembersId).HasColumnName("Members_Id");
            entity.Property(e => e.RealName)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("Real_Name");
            entity.Property(e => e.RejectedReason).HasColumnName("Rejected_Reason");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Members).WithOne(p => p.Seller)
                .HasForeignKey<Seller>(d => d.MembersId)
                .HasConstraintName("FK__Sellers__Members__2116E6DF");
        });

        modelBuilder.Entity<SellerBankAccount>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Seller_B__3214EC07BA2231DA");

            entity.ToTable("Seller_Bank_Accounts");

            entity.Property(e => e.AccountName)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("Account_Name");
            entity.Property(e => e.AccountNumber)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("Account_Number");
            entity.Property(e => e.BankCode)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("Bank_Code");
            entity.Property(e => e.BankName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("Bank_Name");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.IsDefault).HasColumnName("Is_Default");
            entity.Property(e => e.IsVerified).HasColumnName("Is_Verified");
            entity.Property(e => e.SellersId).HasColumnName("Sellers_Id");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Sellers).WithMany(p => p.SellerBankAccounts)
                .HasForeignKey(d => d.SellersId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Seller_Ba__Selle__1E3A7A34");
        });

        modelBuilder.Entity<SellerDocument>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Seller_D__3214EC07AF3BA7D4");

            entity.ToTable("Seller_Documents");

            entity.Property(e => e.DocumentType)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Document_Type");
            entity.Property(e => e.FilePath)
                .IsRequired()
                .HasMaxLength(500)
                .HasColumnName("File_Path");
            entity.Property(e => e.SellersId).HasColumnName("Sellers_Id");
            entity.Property(e => e.UploadedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Uploaded_At");
            entity.Property(e => e.VerifiedAt)
                .HasColumnType("datetime")
                .HasColumnName("Verified_At");

            entity.HasOne(d => d.Sellers).WithMany(p => p.SellerDocuments)
                .HasForeignKey(d => d.SellersId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Seller_Do__Selle__1F2E9E6D");
        });

        modelBuilder.Entity<SellerReturnInfo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Seller_R__3214EC070A4F3847");

            entity.ToTable("Seller_Return_Info");

            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ContactName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("Contact_Name");
            entity.Property(e => e.ContactPhone)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("Contact_Phone");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.District)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ReturnAddress)
                .IsRequired()
                .HasColumnName("Return_Address");
            entity.Property(e => e.SellersId).HasColumnName("Sellers_Id");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");
            entity.Property(e => e.ZipCode)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("Zip_Code");

            entity.HasOne(d => d.Sellers).WithMany(p => p.SellerReturnInfos)
                .HasForeignKey(d => d.SellersId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Seller_Re__Selle__2022C2A6");
        });

        modelBuilder.Entity<Session>(entity =>
        {
            entity.HasKey(e => e.SessionId).HasName("PK__Sessions__E9CBB332983BBEC8");

            entity.Property(e => e.SessionId).HasColumnName("Session_Id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeviceInfo)
                .HasMaxLength(255)
                .HasColumnName("Device_Info");
            entity.Property(e => e.ExpiresAt)
                .HasColumnType("datetime")
                .HasColumnName("Expires_At");
            entity.Property(e => e.IpAddress)
                .HasMaxLength(45)
                .HasColumnName("Ip_Address");
            entity.Property(e => e.LastActivityAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Last_Activity_At");
            entity.Property(e => e.MembersId).HasColumnName("Members_Id");

            entity.HasOne(d => d.Members).WithMany(p => p.Sessions)
                .HasForeignKey(d => d.MembersId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Sessions__Member__220B0B18");
        });

        modelBuilder.Entity<Shipment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Shipment__3214EC079EDBF476");

            entity.Property(e => e.CarrierId).HasColumnName("Carrier_Id");
            entity.Property(e => e.DeliveredAt)
                .HasColumnType("datetime")
                .HasColumnName("Delivered_At");
            entity.Property(e => e.OrderId).HasColumnName("Order_Id");
            entity.Property(e => e.ShippedAt)
                .HasColumnType("datetime")
                .HasColumnName("Shipped_At");
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.TrackingNumber)
                .HasMaxLength(100)
                .HasColumnName("Tracking_Number");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Carrier).WithMany(p => p.Shipments)
                .HasForeignKey(d => d.CarrierId)
                .HasConstraintName("FK__Shipments__Carri__22FF2F51");

            entity.HasOne(d => d.Order).WithMany(p => p.Shipments)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Shipments__Order__23F3538A");
        });

        modelBuilder.Entity<SocialLogin>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Social_L__3214EC0709A70D1A");

            entity.ToTable("Social_Logins");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.MembersId).HasColumnName("Members_Id");
            entity.Property(e => e.Provider)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.ProviderUserId)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("Provider_User_Id");

            entity.HasOne(d => d.Members).WithMany(p => p.SocialLogins)
                .HasForeignKey(d => d.MembersId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Social_Lo__Membe__24E777C3");
        });

        modelBuilder.Entity<SubCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Sub_Cate__3214EC07C3BF07A6");

            entity.ToTable("Sub_Categories");

            entity.HasIndex(e => e.CategoryId, "UQ__Sub_Cate__6DB38D6F26D99DAF").IsUnique();

            entity.HasIndex(e => e.Name, "UQ__Sub_Cate__737584F6C0A36181").IsUnique();

            entity.Property(e => e.CategoryId).HasColumnName("Category_Id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);

            // 修正關聯配置：SubCategory 與 Category 是多對一關係
            entity.HasOne(d => d.Category).WithMany(p => p.SubCategories)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK__Sub_Categ__Categ__725BF7F6");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Users__3214EC07CBF0FB2F");

            entity.HasIndex(e => e.Email, "UQ__Users__A9D105347362D9FE").IsUnique();

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("Is_Active");
            entity.Property(e => e.LastLoginAt)
                .HasColumnType("datetime")
                .HasColumnName("Last_Login_At");
            entity.Property(e => e.MustSetPassword)
                .HasDefaultValue(true)
                .HasColumnName("Must_Set_Password");
            entity.Property(e => e.PasswordHash)
                .HasMaxLength(255)
                .HasColumnName("Password_Hash");
            entity.Property(e => e.RoleId).HasColumnName("Role_Id");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Users__Role_Id__28B808A7");
        });

        modelBuilder.Entity<UserAuditLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__User_Aud__3214EC072841F1A1");

            entity.ToTable("User_Audit_Logs");

            entity.Property(e => e.ActionType)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Action_Type");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.TargetUserId).HasColumnName("Target_User_Id");
            entity.Property(e => e.UserId).HasColumnName("User_Id");

            entity.HasOne(d => d.TargetUser).WithMany(p => p.UserAuditLogTargetUsers)
                .HasForeignKey(d => d.TargetUserId)
                .HasConstraintName("FK__User_Audi__Targe__26CFC035");

            entity.HasOne(d => d.User).WithMany(p => p.UserAuditLogUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__User_Audi__User___27C3E46E");
        });

        modelBuilder.Entity<UserRole>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__User_Rol__3214EC079F197530");

            entity.ToTable("User_Roles");

            entity.HasIndex(e => e.RoleName, "UQ__User_Rol__035DB749A649254B").IsUnique();

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Role_Name");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");
        });

        modelBuilder.Entity<VerificationCode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Verifica__3214EC077057BAC3");

            entity.ToTable("Verification_Codes");

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.ContactInfo)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("Contact_Info");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.ExpiresAt)
                .HasColumnType("datetime")
                .HasColumnName("Expires_At");
            entity.Property(e => e.IsUsed).HasColumnName("Is_Used");
            entity.Property(e => e.MembersId).HasColumnName("Members_Id");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(30);

            entity.HasOne(d => d.Members).WithMany(p => p.VerificationCodes)
                .HasForeignKey(d => d.MembersId)
                .HasConstraintName("FK__Verificat__Membe__29AC2CE0");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}